#!/usr/bin/env bash

readlink=readlink
if [ `uname` = "AIX" ]; then
  readlink=echo
fi

# work around readlink versions not having -f option
fullpath1=`$readlink $0`
if [ "$?" -ne "0" ]; then
  fullpath1=$0
else
  if [ ${fullpath1##/} = $fullpath1 ] && [ ${fullpath1##~} = $fullpath1 ]; then
    # relative path, prepend directory where executable was found
    lpath=`dirname $0`
    fullpath1=$lpath/$fullpath1
  fi
fi

progdir=`dirname $fullpath1`
runningdir=`pwd`
if [ ${progdir##/} != $progdir ] || [ ${progdir##~} != $progdir ]; then
  # absolute path
  fullpath=$progdir
else
  # relative path
  if [ $progdir != "." ]; then
    fullpath=$runningdir/$progdir
  else
    fullpath=$runningdir
  fi
fi

# work around readlink versions not having -f option
fullpath1=`$readlink $fullpath`
if [ "$?" -ne "0" ]; then
  fullpath1=$fullpath
fi

#   If GRUTSYS is not defined, assume it is one directory above
# the location of the script.
if [ -z "$GRUTSYS" ]; then
    GRUTSYS="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"/..
fi

bindir=$GRUTSYS/bin
libdir=$GRUTSYS/lib
incdir=$GRUTSYS/include
#utildir=$GRUTSYS/etc

rpath="-Wl,-rpath=$libdir"
grutlibs="-lTGRUTUtil -lTRawFormat -lGROOT -lTNSCLFormat -lTGEBFormat -lTGRUTUtil -lTNucleus -lTKinematics -lTReaction -lTSRIM -lTNSCLScalers"
detlibs="-lTSega -lTDetector  -lTGretina -lTJanus -lTPhosWall -lTS800 -lTFastScint -lTCaesar -lTS800Sim -lTGretSim
-lTLenda -lTOldSega"
grutmore="-lTGRUTint -lTLoops -lTHistogramming "

cflags="-std=c++0x -I$incdir"



usage="\
Usage: grut-config [--version] [--cflags] [--libs] [--all-libs] [--libdir] [--root] [--help]"

if test $# -eq 0; then
  echo "${usage}" 1>&2
  exit 1
fi

out=""

cflagsout=no
libsout=no
alllibsout=no
rootout=no

while test $# -gt 0; do
  case "$1" in
  -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
  *)    optarg= ;;
  esac

  case $1 in
    --version)
      ### Output the version number.  If GVersion.h can not be found, give up.
      if test -r ${incdir}/GVersion.h; then
	  version_num=`sed -n 's,.*GRUT_RELEASE *\"\(.*\)\".*,\1,p' < ${incdir}/GVersion.h`
	  version_name=`sed -n 's,.*GRUT_RELEASE_NAME *\"\(.*\)\".*,\1,p' < ${incdir}/GVersion.h`
          out="$out GRUT_RELEASE: $version_num"
	  out="$out \n\tRelease the ${version_name}!"
      else
        echo "cannot read ${incdir}/GVersion.h"
        exit 1
      fi
      ;;
    --cflags)
      if test "x$cflagsout" = "xyes" ; then
        shift
        continue
      fi
      cflagsout="yes"
      out="$out $cflags "
      ;;
    --libs)
      if test "x$libsout" = "xyes" ; then
        shift
        continue
      fi
      libsout="yes"
      if test "x$alllibsout" = "xyes" ; then
        shift
        continue
      fi
      out=$"$out -L${libdir} $rpath $grutlibs $detlibs "
      ;;
    --all-libs)
      if test "x$alllibsout" = "xyes" ; then
        shift
        continue
      fi
      alllibsout="yes"
      if test "x$libsout" = "xyes" ; then
        out=$"$out $grutmore "
      else
        out=$"$out -L${libdir} $rpath $grutlibs $detlibs $grutmore -lXMLParser -lXMLIO -lX11 -lXpm -lProof -lGuiHtml "
      fi
      ;;
    --root)
      if test "x$rootout" = "xyes" ; then
        shift
        continue
      fi
      rootout="yes"
      out="$out `root-config --cflags --glibs` -lPhysics -lSpectrum -lPyROOT -lMinuit -lMathMore"
      ;;
    --libdir)
        if test "x$libdirout" = "xyes" ; then
            shift
            continue
        fi
        libdirout="yes"
        out="$out $libdir "
      ;;
    --help)
      ### Print a helpful message...
      echo "Usage: `basname$0` [options]"
      echo ""
      echo "  --version       Print the current GRSI Version number."
      echo "  --cflags        Print compiler flags and header path."
      echo "  --libs          Print libdir + most used GRSI libraries ."
      echo "  --all-libs      Print libdir + all GRSI libraries ."
      echo "  --root          Print root-config output need for most grut compulations."
      echo "  --help          Print what you see here."
      exit 0
      ;;
    *)
      ### Give an error
      echo "Unknown argument \"$1\"!" 1>&2
      echo "${usage}" 1>&2
      exit 1
      ;;
   esac
   shift
done

printf "${out}\n"
